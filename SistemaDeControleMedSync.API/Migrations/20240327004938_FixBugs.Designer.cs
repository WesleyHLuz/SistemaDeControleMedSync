// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaDeControleMedSync.API.Context;

#nullable disable

namespace SistemaDeControleMedSync.API.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20240327004938_FixBugs")]
    partial class FixBugs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ConvenioEmpresa", b =>
                {
                    b.Property<int>("ConveniosAceitosId")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.HasKey("ConveniosAceitosId", "EmpresaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ConvenioEmpresa");
                });

            modelBuilder.Entity("EmpresaMedico", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("MedicosId")
                        .HasColumnType("int");

                    b.HasKey("EmpresaId", "MedicosId");

                    b.HasIndex("MedicosId");

                    b.ToTable("EmpresaMedico");
                });

            modelBuilder.Entity("EspecialidadeMedico", b =>
                {
                    b.Property<int>("EspecialidadesId")
                        .HasColumnType("int");

                    b.Property<int>("MedicosId")
                        .HasColumnType("int");

                    b.HasKey("EspecialidadesId", "MedicosId");

                    b.HasIndex("MedicosId");

                    b.ToTable("EspecialidadeMedico");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.EmpresaConvenio", b =>
                {
                    b.Property<int>("empresaId")
                        .HasColumnType("int");

                    b.Property<int>("convenioId")
                        .HasColumnType("int");

                    b.HasKey("empresaId", "convenioId");

                    b.HasIndex("convenioId");

                    b.ToTable("EmpresaConvenios");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.EmpresaMedico", b =>
                {
                    b.Property<int>("medicoId")
                        .HasColumnType("int");

                    b.Property<int>("empresaId")
                        .HasColumnType("int");

                    b.HasKey("medicoId", "empresaId");

                    b.HasIndex("empresaId");

                    b.ToTable("EmpresaMedicos");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ConvenioId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Convenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cobertura")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumeroConvenio")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Convenios");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("empresaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.MedicoEspecialidade", b =>
                {
                    b.Property<int>("medicoId")
                        .HasColumnType("int");

                    b.Property<int>("especialidadeId")
                        .HasColumnType("int");

                    b.HasKey("medicoId", "especialidadeId");

                    b.HasIndex("especialidadeId");

                    b.ToTable("MedicoEspecialidades");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ConvenioEmpresa", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Convenio", null)
                        .WithMany()
                        .HasForeignKey("ConveniosAceitosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeControleMedSync.API.Entities.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmpresaMedico", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeControleMedSync.API.Entities.Medico", null)
                        .WithMany()
                        .HasForeignKey("MedicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EspecialidadeMedico", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeControleMedSync.API.Entities.Medico", null)
                        .WithMany()
                        .HasForeignKey("MedicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.EmpresaConvenio", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("convenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeControleMedSync.API.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("empresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convenio");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.EmpresaMedico", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("empresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeControleMedSync.API.Entities.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("medicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Cliente", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Convenio", "Convenio")
                        .WithMany("Clientes")
                        .HasForeignKey("ConvenioId");

                    b.Navigation("Convenio");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Especialidade", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Empresa", "Empresa")
                        .WithMany("Especialidades")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.MedicoEspecialidade", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("especialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeControleMedSync.API.Entities.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("medicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Usuario", b =>
                {
                    b.HasOne("SistemaDeControleMedSync.API.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("SistemaDeControleMedSync.API.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.Navigation("Cliente");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Convenio", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("SistemaDeControleMedSync.API.Entities.Empresa", b =>
                {
                    b.Navigation("Especialidades");
                });
#pragma warning restore 612, 618
        }
    }
}
